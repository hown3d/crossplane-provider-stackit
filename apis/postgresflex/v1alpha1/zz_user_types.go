// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// (String) ID of the PostgresFlex instance.
	// ID of the PostgresFlex instance.
	// +crossplane:generate:reference:type=github.com/stackitcloud/crossplane-provider-stackit/apis/postgresflex/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/stackitcloud/crossplane-provider-stackit/config/postgresflex.InstanceIDExtractor()
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in postgresflex to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in postgresflex to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Set of String) Database access levels for the user. Supported values are: login, createdb.
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (String)
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserObservation struct {

	// (String)
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// It is structured as "project_id,instance_id,user_id".
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the PostgresFlex instance.
	// ID of the PostgresFlex instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// (Number)
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Set of String) Database access levels for the user. Supported values are: login, createdb.
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (String) User ID.
	// User ID.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// (String)
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserParameters struct {

	// (String) ID of the PostgresFlex instance.
	// ID of the PostgresFlex instance.
	// +crossplane:generate:reference:type=github.com/stackitcloud/crossplane-provider-stackit/apis/postgresflex/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/stackitcloud/crossplane-provider-stackit/config/postgresflex.InstanceIDExtractor()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in postgresflex to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in postgresflex to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Set of String) Database access levels for the user. Supported values are: login, createdb.
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. Postgres Flex user resource schema. Must have a region specified in the provider configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,stackit}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roles) || (has(self.initProvider) && has(self.initProvider.roles))",message="spec.forProvider.roles is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
