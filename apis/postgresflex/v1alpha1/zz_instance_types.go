// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlavorInitParameters struct {

	// (Number)
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (Number)
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`
}

type FlavorObservation struct {

	// (Number)
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// It is structured as "project_id,instance_id".
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number)
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`
}

type FlavorParameters struct {

	// (Number)
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	RAM *float64 `json:"ram" tf:"ram,omitempty"`
}

type InstanceInitParameters struct {

	// (List of String) The Access Control List (ACL) for the PostgresFlex instance.
	// The Access Control List (ACL) for the PostgresFlex instance.
	ACL []*string `json:"acl,omitempty" tf:"acl,omitempty"`

	// (String)
	BackupSchedule *string `json:"backupSchedule,omitempty" tf:"backup_schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	Flavor *FlavorInitParameters `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Number)
	Replicas *float64 `json:"replicas,omitempty" tf:"replicas,omitempty"`

	// (Attributes) (see below for nested schema)
	Storage *StorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InstanceObservation struct {

	// (List of String) The Access Control List (ACL) for the PostgresFlex instance.
	// The Access Control List (ACL) for the PostgresFlex instance.
	ACL []*string `json:"acl,omitempty" tf:"acl,omitempty"`

	// (String)
	BackupSchedule *string `json:"backupSchedule,omitempty" tf:"backup_schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	Flavor *FlavorObservation `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// It is structured as "project_id,instance_id".
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ID of the PostgresFlex instance.
	// ID of the PostgresFlex instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Number)
	Replicas *float64 `json:"replicas,omitempty" tf:"replicas,omitempty"`

	// (Attributes) (see below for nested schema)
	Storage *StorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InstanceParameters struct {

	// (List of String) The Access Control List (ACL) for the PostgresFlex instance.
	// The Access Control List (ACL) for the PostgresFlex instance.
	// +kubebuilder:validation:Optional
	ACL []*string `json:"acl,omitempty" tf:"acl,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	BackupSchedule *string `json:"backupSchedule,omitempty" tf:"backup_schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Flavor *FlavorParameters `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// (String) STACKIT project ID to which the instance is associated.
	// STACKIT project ID to which the instance is associated.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Replicas *float64 `json:"replicas,omitempty" tf:"replicas,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Storage *StorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type StorageInitParameters struct {

	// (String)
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type StorageObservation struct {

	// (String)
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type StorageParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Class *string `json:"class" tf:"class,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API. Postgres Flex instance resource schema. Must have a region specified in the provider configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,stackit}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.acl) || (has(self.initProvider) && has(self.initProvider.acl))",message="spec.forProvider.acl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backupSchedule) || (has(self.initProvider) && has(self.initProvider.backupSchedule))",message="spec.forProvider.backupSchedule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flavor) || (has(self.initProvider) && has(self.initProvider.flavor))",message="spec.forProvider.flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replicas) || (has(self.initProvider) && has(self.initProvider.replicas))",message="spec.forProvider.replicas is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
